version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydatabase
    ports:
      - "5432:5432"
    networks:
      - app_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always

  redis:
    image: redis:latest
    container_name: redis-cache
    restart: always
    volumes:
    - redis_data:/data
    networks:
      - app_network

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    environment:
      - BACKEND_RDS_URL=http://backend-rds:8000/test_connection/
      - BACKEND_REDIS_URL=http://backend-redis:8001/test_connection/
    ports:
      - "80:8002"
    depends_on:
      - backend-rds
      - backend-redis
    networks:
      - app_network


  backend-rds:
    build:
      context: ./backend_rds
    container_name: backend-rds
    environment:
      - DB_NAME=mydatabase
      - DB_USER=user
      - DB_PASSWORD=password
      - DB_HOST=postgres
      - DB_PORT=5432
      - CORS_ALLOWED_ORIGINS=http://backend-alb-432303704.eu-north-1.elb.amazonaws.com/
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    networks:
      - app_network
    restart: always
    command: gunicorn --bind 0.0.0.0:8000 backend_rds.wsgi:application


  backend-redis:
    build:
      context: ./backend_redis 
    container_name: backend-redis 
    environment:
      - REDIS_HOST=redis-cache
      - REDIS_PORT=6379
      - REDIS_DB=0
      - CORS_ALLOWED_ORIGINS=http://backend-alb-432303704.eu-north-1.elb.amazonaws.com/
    ports:
      - "8001:8001"
    depends_on:
      - redis
    networks:
      - app_network
    restart: always
    command: gunicorn --bind 0.0.0.0:8001 backend_redis.wsgi:application


volumes:
  postgres_data:
  redis_data:

networks:
  app_network: