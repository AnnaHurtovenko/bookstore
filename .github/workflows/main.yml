name: Dynamic Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Configure AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Get changed files
      - name: Check for changes
        id: changes
        run: |
          echo "Checking for changed files..."
          BEFORE_COMMIT=${{ github.event.before }}
          CURRENT_COMMIT=${{ github.sha }}  # Поточний коміт
          echo "BEFORE_COMMIT: $BEFORE_COMMIT"
          echo "CURRENT_COMMIT: $CURRENT_COMMIT"
      
          CHANGED_FILES=$(git diff --name-only $BEFORE_COMMIT $CURRENT_COMMIT)
          echo "Changed files: $CHANGED_FILES"

          if echo "$CHANGED_FILES" | grep -q "backend_rds/"; then
            echo "BACKEND_RDS_CHANGED=true" >> $GITHUB_ENV
          fi
          if echo "$CHANGED_FILES" | grep -q "backend_redis/"; then
            echo "BACKEND_REDIS_CHANGED=true" >> $GITHUB_ENV
          fi
          if echo "$CHANGED_FILES" | grep -q "frontend/"; then
            echo "FRONTEND_CHANGED=true" >> $GITHUB_ENV
          fi

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Conditionally build and push Backend RDS Image
      - name: Build and push backend-rds image
        if: env.BACKEND_RDS_CHANGED == 'true'
        env:
          GIT_SHA: ${{ github.sha }}
          ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
        run: |
          cd backend_rds
          docker build -t backend-rds .
          docker tag backend-rds $ECR_REGISTRY/backend-rds:$GIT_SHA
          docker push $ECR_REGISTRY/backend-rds:$GIT_SHA

      # Conditionally build and push Backend Redis Image
      - name: Build and push backend-redis image
        if: env.BACKEND_REDIS_CHANGED == 'true'
        env:
          GIT_SHA: ${{ github.sha }}
          ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
        run: |
          cd backend_redis
          docker build -t backend-redis .
          docker tag backend-redis $ECR_REGISTRY/backend-redis:$GIT_SHA
          docker push $ECR_REGISTRY/backend-redis:$GIT_SHA

      # Conditionally build and push Frontend Image
      - name: Build and push frontend image
        if: env.FRONTEND_CHANGED == 'true'
        env:
          GIT_SHA: ${{ github.sha }}
          ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
        run: |
          cd frontend
          docker build -t frontend .
          docker tag frontend $ECR_REGISTRY/frontend:$GIT_SHA
          docker push $ECR_REGISTRY/frontend:$GIT_SHA

      # Deploy to EC2
      - name: Get EC2 public IP
        id: ec2_ip
        run: |
            EC2_INSTANCE_ID=${{ secrets.EC2_INSTANCE_ID }}
            EC2_PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-id $EC2_INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text \
            --region ${{ secrets.AWS_REGION }})
            echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV
        
      - name: Show EC2 Public IP
        run: echo "Deploying to EC2 at IP:${{ env.EC2_PUBLIC_IP }}"

      - name: Deploy to EC2
        if: env.BACKEND_RDS_CHANGED == 'true' || env.BACKEND_REDIS_CHANGED == 'true' || env.FRONTEND_CHANGED == 'true'
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          GIT_SHA: ${{ github.sha }}
          ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          mkdir -p ~/.ssh
                echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
                chmod 600 ~/.ssh/id_rsa

          echo "Testing SSH connection to EC2..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_PUBLIC_IP }} << 'EOF'
          set -e
          export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
          export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
          export AWS_REGION=${AWS_REGION}
          export ECR_REGISTRY=${ECR_REGISTRY}
          export GIT_SHA=${GIT_SHA}

          cd /home/ubuntu/bookstore 

          aws ecr get-login-password --region "$AWS_REGION" | sudo docker login --username AWS --password-stdin "$ECR_REGISTRY"

          if [[ "${BACKEND_RDS_CHANGED}" == "true" ]]; then
            yq e '.services.backend_rds.image = strenv(ECR_REGISTRY)+"/backend-rds:"+strenv(GIT_SHA)' -i docker-compose.yml
          fi
          if [[ "${BACKEND_REDIS_CHANGED}" == "true" ]]; then
            yq e '.services.backend_redis.image = strenv(ECR_REGISTRY)+"/backend-redis:"+strenv(GIT_SHA)' -i docker-compose.yml
          fi
          if [[ "${FRONTEND_CHANGED}" == "true" ]]; then
            yq e '.services.frontend.image = strenv(ECR_REGISTRY)+"/frontend:"+strenv(GIT_SHA)' -i docker-compose.yml
          fi

          sudo docker-compose down
          sudo docker-compose up -d
          EOF
