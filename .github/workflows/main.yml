name: Build and Deploy to AWS

on:
  push:
    branches:
      - main
    paths:
        - 'frontend/**'
        - 'backend_rds/**'
        - 'backend_redis/**'
        - 'docker-compose.yml'          
        - '.github/workflows/**'    
  pull_request:
    branches:
      - main
    paths:
        - 'frontend/**'
        - 'backend_rds/**'
        - 'backend_redis/**'
        - 'docker-compose.yml'          
        - '.github/workflows/**'    

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
        matrix:
          service: [frontend, backend-rds, backend-redis]  
          include:
            - service: frontend
              context: ./frontend
            - service: backend-rds
              context: ./backend_rds
            - service: backend-redis
              context: ./backend_redis
            
    steps:
        # Крок 1: Checkout репозиторію
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            fetch-depth: 5

        - name: Set up AWS CLI
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}
  
        # Крок 2: Логін в AWS ECR
        - name: Login to Amazon ECR
          uses: aws-actions/amazon-ecr-login@v1       

        - name: Save GIT SHA
          run: echo "GIT_SHA=${{ github.sha }}" >> $GITHUB_ENV
        
        - name: Build and push ${{ matrix.service }} image if changed
          env:
            ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
          run: |
            BEFORE_COMMIT=${{ github.event.before }}
            CURRENT_COMMIT=${{ github.sha }}  # Поточний коміт
            echo "BEFORE_COMMIT: $BEFORE_COMMIT"
            echo "CURRENT_COMMIT: $CURRENT_COMMIT"
            
            # Якщо немає початкового коміту, встановлюємо його на перший коміт
            if [ -z "$BEFORE_COMMIT" ] || [ "$BEFORE_COMMIT" = "0000000000000000000000000000000000000000" ]; then
                BEFORE_COMMIT=$(git rev-list --max-parents=0 HEAD)
            fi
        
            # Вивести зміни між комітами для діагностики
            echo "Checking for changes between commits $BEFORE_COMMIT and $CURRENT_COMMIT..."
            git diff --name-status $BEFORE_COMMIT $CURRENT_COMMIT
        
            # Вивести журнал комітів для додаткової перевірки
            echo "Git log for the range:"
            git log --oneline $BEFORE_COMMIT..$CURRENT_COMMIT
        
            # Перевірка змін між комітами
            if git diff --name-only $BEFORE_COMMIT $CURRENT_COMMIT | grep -q "^${{ matrix.context }}/"; then
                echo "Changes detected in ${{ matrix.service }}. Building and pushing image..."
                cd ${{ matrix.context }}
                docker build -t $ECR_REGISTRY/${{ matrix.service }}:$CURRENT_COMMIT .
                docker push $ECR_REGISTRY/${{ matrix.service }}:$CURRENT_COMMIT
            elif git diff --name-only $BEFORE_COMMIT $CURRENT_COMMIT | grep -q "docker-compose.yml"; then
                echo "Changes detected in Docker Compose. Rebuilding all services..."
                docker-compose build
                docker-compose push
            else
                echo "No relevant changes. Skipping build and push."
            fi

  deploy:
    runs-on: ubuntu-latest
    needs: build
    strategy:
        matrix:
          service: [frontend, backend-rds, backend-redis]  
          include:
            - service: frontend
              context: ./frontend
            - service: backend-rds
              context: ./backend_rds
            - service: backend-redis
              context: ./backend_redis     
    steps:
        # Крок 1: Checkout репозиторію
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            fetch-depth: 5

        - name: Set up AWS CLI
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}
  
        # Крок 2: Логін в AWS ECR
        - name: Login to Amazon ECR
          uses: aws-actions/amazon-ecr-login@v1       
        
        # Крок 4: Налаштування SSH підключення
        - name: Setup SSH Key
          run: |
                mkdir -p ~/.ssh
                echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
                chmod 600 ~/.ssh/id_rsa

        # Крок 5: Отримуємо публічний IP EC2 (якщо використовуємо instance ID)
        - name: Get EC2 public IP
          id: ec2_ip
          run: |
            EC2_INSTANCE_ID=${{ secrets.EC2_INSTANCE_ID }}
            EC2_PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-id $EC2_INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text \
            --region ${{ secrets.AWS_REGION }})
            echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV
        
        - name: Show EC2 Public IP
          run: echo "Deploying to EC2 at IP:${{ env.EC2_PUBLIC_IP }}"

        # Крок 6: Деплой в EC2 через SSH
        - name: Deploy to EC2
          run: |
            echo "Testing SSH connection to EC2..."
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_PUBLIC_IP }} << 'EOF'
            set -e
            
            cd /home/ubuntu/bookstore

            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_REGION=${{ secrets.AWS_REGION }}
            export ECR_REGISTRY=${{ vars.ECR_REGISTRY }}
            export GIT_SHA=${{ github.sha }}

            echo "Fetching latest code..."
            git fetch origin main
            git reset --hard origin/main

            echo "Logging into AWS ECR..."
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.ECR_REGISTRY }}

            BEFORE_COMMIT=${{ github.event.before }}
            CURRENT_COMMIT=${{ github.sha }}
            
            # Перевірка змін між комітами
            echo "Checking for changes in ${{ matrix.service }}..."
            if ! git rev-parse HEAD~1 >/dev/null 2>&1; then
                echo "No previous commit found, running full deployment."
            else
                if git diff --quiet HEAD~1 HEAD -- ${{ matrix.context }}/; then
                    echo "No changes in ${{ matrix.service }}. Skipping deploy."
                else
                    echo "Changes detected in ${{ matrix.service }}. Deploying..."
                    docker pull $ECR_REGISTRY/${{ matrix.service }}:$CURRENT_COMMIT
                    docker-compose down ${{ matrix.service }} || true
                    docker-compose up -d ${{ matrix.service }}
                fi
            fi
            
            # Перевірка змін у Docker Compose
            if git diff --name-only $BEFORE_COMMIT HEAD | grep -q "docker-compose.yml"; then
                echo "docker-compose.yml has changed. Restarting all services..."
                docker-compose down
                docker-compose up -d --build
            fi
    

            echo "Removing old Docker images..."
            docker image prune -f
            EOF
