name: Backend RDS Build and Deploy

on:
  push:
    paths:
      - 'backend_rds/**'
  pull_request:
    paths:
      - 'backend_rds/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend-rds image
        env:
          GIT_SHA: ${{ github.sha }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          cd backend_rds
          docker build -t backend-rds .
          docker tag backend-rds $ECR_REGISTRY/backend-rds:$GIT_SHA
          docker push $ECR_REGISTRY/backend-rds:$GIT_SHA

        

        # Deploy to EC2
      - name: Get EC2 public IP
        id: ec2_ip
        run: |
            EC2_INSTANCE_ID=${{ secrets.EC2_INSTANCE_ID }}
            EC2_PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-id $EC2_INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text \
            --region ${{ secrets.AWS_REGION }})
            echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV
        
      - name: Show EC2 Public IP
        run: echo "Deploying to EC2 at IP:${{ env.EC2_PUBLIC_IP }}"

      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          GIT_SHA: ${{ github.sha }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      
          echo "Testing SSH connection to EC2..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_PUBLIC_IP }} \
          "ECR_REGISTRY=${{ secrets.ECR_REGISTRY }} GIT_SHA=${{ github.sha }} bash -s" << 'EOF'
      
          set -a
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_REGION=${{ secrets.AWS_REGION }}
          export ECR_REGISTRY=${ECR_REGISTRY}
          export GIT_SHA=${GIT_SHA}
      
          cd /home/ubuntu/bookstore 
      
          aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_REGISTRY"

          sed -i "s|image: .*backend-rds:.*|image: $ECR_REGISTRY/backend-rds:$GIT_SHA|" docker-compose.yml
          
          echo "Checking updates for backend-rds..."
          IMAGE_EXISTS=$(aws ecr describe-images --repository-name backend-rds --image-ids imageTag=${GIT_SHA} --query 'imageDetails[0].imageDigest' --output text 2>/dev/null || echo "None")
      
          if [[ "$IMAGE_EXISTS" != "None" ]]; then
              echo "New image found for backend-rds. Updating..."
              docker-compose up -d backend-rds
          else
              echo "No new image for backend-rds. Skipping update."
          fi
      
          echo "Current running container images after restart:"
          docker ps --format "table {{.Names}}\t{{.Image}}"
          EOF